// CONTENTS
//
// 1.   Media size
// 2.   Centering
// 3.   Clearfix
// 4.   Font w/ rem
// 5.   Animation
// 6.   Retina
// 7.   Gradient
// 8.   External font
// 9.   Padding and margin
// 10.  Opacity
// 11.  Box w/ dimensions

//--------------------------
//  Media size mixin
// -------------------------

// Define the breakpoints
$breakpoint-small: 576px;
$breakpoint-med: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;

@mixin screen($size, $type: max, $pixels: $breakpoint-small) {
  @if $size == 'sm' {
    @media screen and ($type + -width: $breakpoint-small) {
      @content;
    }
  } @else if $size == 'med' {
    @media screen and ($type + -width: $breakpoint-med) {
      @content;
    }
  } @else if $size == 'lg' {
    @media screen and ($type + -width: $breakpoint-lg) {
      @content;
    }
  } @else if $size == 'xl' {
    @media screen and ($type + -width: $breakpoint-xl) {
      @content;
    }
  } @else if $size == 'custom' {
    @media screen and ($type + -width: $pixels + px) {
      @content;
    }
  } @else {
    @content;
  }
}

// Using the mixin .foo {
//   @include screen(sm) {
//     width: 80%;
//   }
//   @include screen(med) {
//     width: 40%;
//   }
//   @include screen(lg) {
//     width: 20%;
//   }
//   @include screen(xl) {
//     width: 60%;
//   }
//   @include screen(custom, max, 400) {
//     width: 100%;
//   }
// }

//--------------------------
//  Centering mixin
// -------------------------

@mixin center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}
// Using the mixin
// .foo {
//   @include center(both);
// }
// .foo-parent {
//   position: relative;
// }

//--------------------------
//  Clearfix mixin
// -------------------------

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}
// Usage
// .container-with-floated-children {
//   @extend %clearfix;
// }

//--------------------------
//  Font w/ rem mixin
// -------------------------

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}
//Usage
// p {
//   @include font-size(16px);
// }

//--------------------------
//  Animation mixin
// -------------------------

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}
//Usage
// Define animation name, and properties
// @include keyframes(fade-out) {
//   0% {
//     opacity: 1;
//   }
//   90% {
//     opacity: 0;
//   }
// }
// // Add animation to element
// .element {
//   width: 100px;
//   height: 100px;
//   background: black;
//   @include animation('fade-out 5s 3');
// }

//--------------------------
//  Retina mixin
// -------------------------

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}
//Usage
// div.logo {
//   background: url('logo.png') no-repeat;
//   @include image-2x('logo2x.png', 100px, 25px);
// }

//--------------------------
//  Gradient mixin
// -------------------------

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}
//Usage:
//$start-color, $end-color, $orientation - vertical/horizontal/radial
// .foo {
//   @include background-gradient(red, black, 'vertical');
// }

//--------------------------
//  External font mixin
// -------------------------

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name+'.eot');
    src: url($file-name+'.eot?#iefix') format('embedded-opentype'), url($file-name+'.woff') format('woff'), url($file-name+'.ttf') format('truetype'), url($file-name+'.svg##{$font-name}') format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}
//Usage
//@include font-face('gotham', '/fonts/gotham', bold);

//--------------------------
//  Padding and margin mixin
// -------------------------

//Padding mixin
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}
//Margin mixin
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}
//Usage definition
//@include padding(top, right, bottom, left);
//@include margin(top, right, bottom, left);
//Usage 1
// @include padding(1px, 2px, 3px, 4px);
// @include margin(1px, 2px, 3px, 4px);
//Usage 2 (with null properties)
// @include padding(1px, null, 3px, 4px);
// @include margin(1px, 2px, null, 4px);

// .foo {
//   @include padding(1px, null, 3px, 4px);
// }

//--------------------------
//  Opacity
// -------------------------

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie); //IE8
}

//Usage
// .foo {
//   @include opacity(0.4);
// }

//--------------------------
//  Box w/ dimensions
// -------------------------

@mixin box($width, $height...) {
  width: $width;
  height: $height;
}

//Usage
.foo {
  @include box(50px);
}

.bar {
  @include box(100px, 50px);
}
